import os
import json
from dotenv import load_dotenv
import telebot
from flask import Flask, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
import threading
import base64
import requests
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
CORS(app, resources={
    r"/prices": {
        "origins": "*",  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
        "methods": ["GET"],
        "allow_headers": ["Content-Type"]
    }
})

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ü–µ–Ω–∞–º–∏
PRICES_FILE = os.path.join(os.path.dirname(__file__), 'config', 'prices.json')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SERVER_CONFIG_FILE = os.path.join(os.path.dirname(__file__), 'config', 'server_config.json')

def load_prices():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    with open(PRICES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_prices(prices):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª"""
    with open(PRICES_FILE, 'w', encoding='utf-8') as f:
        json.dump(prices, f, indent=4, ensure_ascii=False)

def load_server_config():
    try:
        with open(SERVER_CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return {
            "development": {"server_url": "http://localhost:5000"},
            "production": {"server_url": "http://localhost:5000"}
        }

def save_server_config(config):
    try:
        with open(SERVER_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

@app.route('/prices', methods=['GET'])
def get_prices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã"""
    try:
        prices = load_prices()
        return jsonify(prices)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def update_package_price(stars, new_price, new_usd):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥"""
    try:
        prices = load_prices()
        for package in prices['stars']['packages']:
            if package['stars'] == stars:
                package['price'] = new_price
                package['usd'] = new_usd
                save_prices(prices)
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–∞: {e}")
        return False

def update_gift_price(gift_id, new_price):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞"""
    try:
        prices = load_prices()
        for gift_type, gift in prices['gifts'].items():
            if str(gift['id']) == str(gift_id):
                gift['price'] = float(new_price)
                save_prices(prices)
                return True
        return False
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–∞: {str(e)}")

def update_premium_price(package_index, new_price):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞"""
    try:
        prices = load_prices()
        if 0 <= package_index < len(prices['premium']['packages']):
            prices['premium']['packages'][package_index]['price'] = float(new_price)
            save_prices(prices)
            return True
        return False
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞: {str(e)}")

bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    markup = telebot.types.InlineKeyboardMarkup()
    webapp_btn = telebot.types.InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å",
        web_app=telebot.types.WebAppInfo(url="https://pepsil1te.github.io/earnstars/")
    )
    markup.add(webapp_btn)
    
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars.

üåü –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∑–≤–µ–∑–¥—ã –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–∑–µ–π
‚Ä¢ –î–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å Telegram Premium
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        telebot.types.InlineKeyboardButton("üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã", callback_data="menu_stars"),
        telebot.types.InlineKeyboardButton("üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏", callback_data="menu_gifts"),
        telebot.types.InlineKeyboardButton("üëë –¶–µ–Ω—ã –Ω–∞ Premium", callback_data="menu_premium")
    )
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
def handle_menu_selection(call):
    if call.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    menu_type = call.data.split('_')[1]
    
    if menu_type == 'stars':
        show_stars_menu(call.message)
    elif menu_type == 'gifts':
        show_gifts_menu(call.message)
    elif menu_type == 'premium':
        show_premium_menu(call.message)
    
    bot.answer_callback_query(call.id)

def show_stars_menu(message):
    prices = load_prices()
    packages = prices['stars']['packages']
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for pkg in packages:
        button_text = f"{pkg['stars']} –∑–≤–µ–∑–¥ - {pkg['price']}‚ÇΩ"
        callback_data = f"edit_stars_{pkg['stars']}"
        markup.add(telebot.types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:",
        message.chat.id,
        message.message_id,
        reply_markup=markup
    )

def show_gifts_menu(message):
    try:
        prices = load_prices()
        gifts = prices['gifts']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
        keyboard = telebot.types.InlineKeyboardMarkup()
        for gift_type, gift in gifts.items():
            button_text = f"{gift['name']} - {gift['price']} ‚ÇΩ"
            callback_data = f"edit_gift_{gift['id']}"
            keyboard.add(telebot.types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def show_premium_menu(message):
    try:
        prices = load_prices()
        premium_packages = prices['premium']['packages']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏ –ø—Ä–µ–º–∏—É–º
        keyboard = telebot.types.InlineKeyboardMarkup()
        for i, pkg in enumerate(premium_packages):
            duration = pkg['duration']
            price = pkg['price']
            button_text = f"üåü {duration} –¥–Ω–µ–π - {price} ‚ÇΩ"
            callback_data = f"edit_premium_{i}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ id
            keyboard.add(telebot.types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_admin")
def back_to_admin_menu(call):
    if call.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        telebot.types.InlineKeyboardButton("üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã", callback_data="menu_stars"),
        telebot.types.InlineKeyboardButton("üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏", callback_data="menu_gifts"),
        telebot.types.InlineKeyboardButton("üëë –¶–µ–Ω—ã –Ω–∞ Premium", callback_data="menu_premium")
    )
    
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('edit_stars_', 'edit_gift_', 'edit_premium_')))
def handle_edit_selection(call):
    if call.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    try:
        action, item_type, item_id = call.data.split('_')
        prices = load_prices()
        
        if item_type == 'stars':
            stars = int(item_id)
            package = next((pkg for pkg in prices['stars']['packages'] if pkg['stars'] == stars), None)
            if package:
                msg = f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ {stars} –∑–≤–µ–∑–¥: {package['price']}‚ÇΩ (${package['usd']})\n\n"
                msg += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö."
                bot.send_message(call.message.chat.id, msg)
                bot.register_next_step_handler(call.message, process_new_price, stars=stars)
        
        elif item_type == 'gift':
            gift_id = int(item_id)
            gift = next((data for _, data in prices['gifts'].items() if data['id'] == gift_id), None)
            if gift:
                msg = f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ '{gift['name']}': {gift['price']}‚ÇΩ\n\n"
                msg += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö."
                bot.send_message(call.message.chat.id, msg)
                bot.register_next_step_handler(call.message, process_new_gift_price, gift_id=gift_id)
        
        elif item_type == 'premium':
            package_index = int(item_id)
            package = prices['premium']['packages'][package_index]
            duration = package['duration']
            msg = f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ '{package['name']}': {package['price']}‚ÇΩ\n\n"
            msg += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö."
            bot.send_message(call.message.chat.id, msg)
            bot.register_next_step_handler(call.message, process_new_premium_price, package_index=package_index)
        
        bot.answer_callback_query(call.id)
    
    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def process_new_price(message, stars):
    if message.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        new_price = float(message.text)
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD
        usd_rate = get_usd_rate()
        new_usd = round(new_price / usd_rate, 2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        if update_package_price(stars, new_price, new_usd):
            response = f"‚úÖ –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ {stars} –∑–≤–µ–∑–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}‚ÇΩ (${new_usd})"
        else:
            response = "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        bot.reply_to(message, response)
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def process_new_gift_price(message, gift_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞"""
    if message.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        new_price = float(message.text)
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞
        if update_gift_price(gift_id, new_price):
            prices = load_prices()
            gift_name = None
            for gift in prices['gifts'].values():
                if str(gift['id']) == str(gift_id):
                    gift_name = gift['name']
                    break
            
            response = f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ '{gift_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}‚ÇΩ"
        else:
            response = "‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        bot.reply_to(message, response)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤
        show_gifts_menu(message)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        show_gifts_menu(message)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def process_new_premium_price(message, package_index):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞"""
    if message.from_user.id != int(os.getenv('ADMIN_ID')):
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        new_price = float(message.text)
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞
        if update_premium_price(package_index, new_price):
            prices = load_prices()
            package = prices['premium']['packages'][package_index]
            response = f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –Ω–∞ {package['duration']} –¥–Ω–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}‚ÇΩ"
        else:
            response = "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        bot.reply_to(message, response)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–æ–≤
        show_premium_menu(message)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        show_premium_menu(message)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_usd_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB —Å –¶–ë –†–§"""
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        if response.ok:
            data = response.json()
            return data['Valute']['USD']['Value']
    except:
        return 90.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

@bot.message_handler(commands=['seturl'])
def set_server_url(message):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = message.text.split(maxsplit=1)[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
        if not url.startswith(('http://', 'https://')):
            bot.reply_to(message, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_server_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config['production']['server_url'] = url
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if save_server_config(config):
            bot.reply_to(message, f"URL —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {url}")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /seturl <url>\n–ü—Ä–∏–º–µ—Ä: /seturl http://192.168.0.102:5000")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    flask_thread = threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000})
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            time.sleep(5)
