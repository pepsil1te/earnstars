import os
import json
from dotenv import load_dotenv
import telebot
from flask import Flask, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
import threading
import base64
import requests

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///prices.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
class StarPackage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    stars = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)
    usd = db.Column(db.Float, nullable=False)

class Gift(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)

class PremiumPackage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
with app.app_context():
    db.create_all()
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    if not StarPackage.query.first():
        initial_packages = [
            {'stars': 50, 'price': 50, 'usd': 0.56},
            {'stars': 75, 'price': 75, 'usd': 0.83},
            {'stars': 100, 'price': 100, 'usd': 1.11},
            {'stars': 150, 'price': 150, 'usd': 1.67},
            {'stars': 200, 'price': 200, 'usd': 2.22},
            {'stars': 300, 'price': 300, 'usd': 3.33},
            {'stars': 400, 'price': 400, 'usd': 4.44},
            {'stars': 500, 'price': 500, 'usd': 5.56}
        ]
        for pkg in initial_packages:
            db.session.add(StarPackage(**pkg))
        
        initial_gifts = [
            {'name': '–ü–æ–¥–∞—Ä–æ–∫ 1', 'price': 100},
            {'name': '–ü–æ–¥–∞—Ä–æ–∫ 2', 'price': 200},
            {'name': '–ü–æ–¥–∞—Ä–æ–∫ 3', 'price': 300},
        ]
        for gift in initial_gifts:
            db.session.add(Gift(**gift))
        
        initial_premium_packages = [
            {'name': '–ü—Ä–µ–º–∏—É–º 1', 'price': 500},
            {'name': '–ü—Ä–µ–º–∏—É–º 2', 'price': 1000},
            {'name': '–ü—Ä–µ–º–∏—É–º 3', 'price': 1500},
        ]
        for pkg in initial_premium_packages:
            db.session.add(PremiumPackage(**pkg))
        
        db.session.commit()

@app.route('/prices', methods=['GET'])
def get_prices():
    try:
        packages = StarPackage.query.all()
        gifts = Gift.query.all()
        premium_packages = PremiumPackage.query.all()
        prices_data = {
            'stars': {
                'packages': [
                    {'stars': pkg.stars, 'price': pkg.price, 'usd': pkg.usd}
                    for pkg in packages
                ]
            },
            'gifts': {
                gift.name: gift.price
                for gift in gifts
            },
            'premium': {
                'packages': [
                    {'name': pkg.name, 'price': pkg.price}
                    for pkg in premium_packages
                ]
            }
        }
        return jsonify(prices_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def update_package_price(stars, new_price, new_usd):
    with app.app_context():
        package = StarPackage.query.filter_by(stars=stars).first()
        if package:
            package.price = new_price
            package.usd = new_usd
            db.session.commit()
            return True
        return False

def update_gift_price(gift_name, new_price):
    with app.app_context():
        gift = Gift.query.filter_by(name=gift_name).first()
        if gift:
            gift.price = new_price
            db.session.commit()
            return True
        return False

def update_premium_price(package_name, new_price):
    with app.app_context():
        package = PremiumPackage.query.filter_by(name=package_name).first()
        if package:
            package.price = new_price
            db.session.commit()
            return True
        return False

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
GITHUB_REPO = "pepsil1te/earnstars"
GITHUB_BRANCH = "main"

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–∑–≤–µ–∑–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã.")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton('üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã'),
        telebot.types.KeyboardButton('üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏')
    )
    markup.add(
        telebot.types.KeyboardButton('üëë –¶–µ–Ω—ã –Ω–∞ Premium'),
        telebot.types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã' and message.from_user.id == ADMIN_ID)
def edit_star_prices(message):
    with app.app_context():
        packages = StarPackage.query.all()
        response = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã:\n\n"
        for pkg in packages:
            response += f"{pkg.stars} –∑–≤–µ–∑–¥ - {pkg.price} —Ä—É–±. (${pkg.usd})\n"
        
        response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        response += "–∑–≤–µ–∑–¥—ã [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞] [—Ü–µ–Ω–∞ –≤ USD]\n"
        response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–≤–µ–∑–¥—ã 50 60 0.67"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏' and message.from_user.id == ADMIN_ID)
def edit_gift_prices(message):
    with app.app_context():
        gifts = Gift.query.all()
        response = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
        for gift in gifts:
            response += f"{gift.name} - {gift.price} —Ä—É–±.\n"
        
        response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        response += "–ø–æ–¥–∞—Ä–æ–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]\n"
        response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–∞—Ä–æ–∫ –ü–æ–¥–∞—Ä–æ–∫ 1 120"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üëë –¶–µ–Ω—ã –Ω–∞ Premium' and message.from_user.id == ADMIN_ID)
def edit_premium_prices(message):
    with app.app_context():
        packages = PremiumPackage.query.all()
        response = "–¢–µ–∫—É—â–∏–µ –ø–∞–∫–µ—Ç—ã Premium:\n\n"
        for pkg in packages:
            response += f"{pkg.name} - {pkg.price} —Ä—É–±.\n"
        
        response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        response += "–ø—Ä–µ–º–∏—É–º [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]\n"
        response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–º–∏—É–º –ü—Ä–µ–º–∏—É–º 1 600"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥' and message.from_user.id == ADMIN_ID)
def back_to_start(message):
    start(message)

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∑–≤–µ–∑–¥—ã '))
def update_stars_price(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        stars = int(parts[1])
        price = float(parts[2])
        usd = float(parts[3])
        
        if update_package_price(stars, price, usd):
            bot.reply_to(message, f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è –ø–∞–∫–µ—Ç–∞ {stars} –∑–≤–µ–∑–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{price} —Ä—É–±. (${usd})")
        else:
            bot.reply_to(message, f"‚ùå –ü–∞–∫–µ—Ç {stars} –∑–≤–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∑–≤–µ–∑–¥—ã [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞] [—Ü–µ–Ω–∞ –≤ USD]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text.lower().startswith('–ø–æ–¥–∞—Ä–æ–∫ '))
def update_gift_price(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        gift_name = ' '.join(parts[1:-1])
        new_price = float(parts[-1])
        
        if update_gift_price(gift_name, new_price):
            bot.reply_to(message, f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ '{gift_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{new_price} —Ä—É–±.")
        else:
            bot.reply_to(message, f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ '{gift_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ø–æ–¥–∞—Ä–æ–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text.lower().startswith('–ø—Ä–µ–º–∏—É–º '))
def update_premium_price(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        package_name = ' '.join(parts[1:-1])
        new_price = float(parts[-1])
        
        if update_premium_price(package_name, new_price):
            bot.reply_to(message, f"‚úÖ –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ '{package_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{new_price} —Ä—É–±.")
        else:
            bot.reply_to(message, f"‚ùå –ü–∞–∫–µ—Ç '{package_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–µ–º–∏—É–º [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:5000")
    bot.polling()
