import os
import json
import base64
import requests
from dotenv import load_dotenv
import telebot
from flask import Flask, request, jsonify, send_from_directory, render_template_string
from flask_cors import CORS
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
GITHUB_REPO = "pepsil1te/earnstars"
GITHUB_BRANCH = "main"

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
CORS(app, resources={
    r"/prices": {
        "origins": ["https://pepsil1te.github.io", "http://127.0.0.1:5000", "http://localhost:5000"],
        "methods": ["GET", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "expose_headers": ["Content-Type"],
        "supports_credentials": True
    }
})

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
PRICES_FILE = os.path.join(CURRENT_DIR, 'config', 'prices.json')

def load_prices():
    with open(PRICES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def update_github_file(prices):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª prices.json –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    if not GITHUB_TOKEN:
        return False, "GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        file_path = "config/prices.json"
        
        # API endpoint –¥–ª—è GitHub
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{file_path}"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ SHA
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code}"
        
        current_file = response.json()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64
        content = json.dumps(prices, ensure_ascii=False, indent=4)
        content_bytes = content.encode('utf-8')
        content_base64 = base64.b64encode(content_bytes).decode('utf-8')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data = {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
            "content": content_base64,
            "sha": current_file["sha"],
            "branch": GITHUB_BRANCH
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = requests.put(url, headers=headers, json=data)
        
        if response.status_code == 200:
            return True, "–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ GitHub"
        else:
            return False, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code}"
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GitHub: {str(e)}"

def save_prices(prices):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ GitHub"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    with open(PRICES_FILE, 'w', encoding='utf-8') as f:
        json.dump(prices, f, ensure_ascii=False, indent=4)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ GitHub
    success, message = update_github_file(prices)
    return success, message

def get_usd_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB"""
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        if response.ok:
            data = response.json()
            return data['Valute']['USD']['Value']
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        return 92.5

@app.route('/')
def index():
    return send_from_directory(CURRENT_DIR, 'index.html')

@app.route('/<path:filename>')
def serve_file(filename):
    return send_from_directory(CURRENT_DIR, filename)

@app.route('/webapp')
def webapp():
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>EarnStars</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
                background-color: var(--tg-theme-bg-color, #1d2733);
                color: var(--tg-theme-text-color, #ffffff);
                margin: 0;
                padding: 16px;
            }
            .header {
                display: flex;
                align-items: center;
                padding: 10px;
                border-bottom: 1px solid var(--tg-theme-hint-color, #454545);
            }
            .profile {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            .profile-pic {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: #4CAF50;
            }
            .button {
                display: block;
                width: 100%;
                padding: 12px;
                margin: 8px 0;
                border-radius: 8px;
                border: none;
                background-color: var(--tg-theme-button-color, #3390ec);
                color: var(--tg-theme-button-text-color, #ffffff);
                cursor: pointer;
                text-align: center;
                text-decoration: none;
            }
            .secondary-button {
                background-color: var(--tg-theme-secondary-bg-color, #232e3c);
            }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="profile">
                <div class="profile-pic"></div>
                <span id="username">@username</span>
            </div>
            <div style="margin-left: auto;">
                <span>RU</span>
            </div>
        </div>

        <a href="#" class="button" onclick="buyStars()">–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã</a>
        <a href="#" class="button" onclick="sellStars()">–ü—Ä–æ–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã</a>
        <a href="#" class="button secondary-button" onclick="buyGift()">–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</a>
        <a href="#" class="button secondary-button" onclick="buyPremium()">–ö—É–ø–∏—Ç—å Telegram Premium</a>
        <a href="#" class="button secondary-button" onclick="showTransactions()">–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</a>
        <a href="#" class="button secondary-button" onclick="subscribeChannel()">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</a>
        <a href="#" class="button secondary-button" onclick="contactSupport()">–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</a>

        <script>
            let tg = window.Telegram.WebApp;
            tg.expand();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document.getElementById('username').textContent = tg.initDataUnsafe.user?.username || '@user';

            function buyStars() {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
                tg.showAlert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥');
            }

            function sellStars() {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥
                tg.showAlert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥');
            }

            function buyGift() {
                tg.showAlert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞');
            }

            function buyPremium() {
                tg.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ Telegram Premium');
            }

            function showTransactions() {
                tg.showAlert('–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
            }

            function subscribeChannel() {
                tg.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª');
            }

            function contactSupport() {
                tg.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É');
            }
        </script>
    </body>
    </html>
    ''')

@app.route('/prices', methods=['GET'])
def get_prices():
    try:
        with open('config/prices.json', 'r', encoding='utf-8') as f:
            prices = json.load(f)
        return jsonify(prices)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@bot.message_handler(commands=['start'])
def start(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å EarnStars",
        web_app=WebAppInfo(url="https://pepsil1te.github.io/earnstars/")
    ))
    
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EarnStars! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton('üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã'),
        KeyboardButton('üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏')
    )
    markup.add(
        KeyboardButton('üëë –¶–µ–Ω—ã –Ω–∞ Premium'),
        KeyboardButton('üîô –ù–∞–∑–∞–¥')
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã' and message.from_user.id == ADMIN_ID)
def edit_star_prices(message):
    prices = load_prices()
    text = "–¢–µ–∫—É—â–∏–µ –ø–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥:\n\n"
    for i, package in enumerate(prices['stars']['packages'], 1):
        text += f"{i}. {package['stars']} –∑–≤–µ–∑–¥ - {package['price']}‚ÇΩ (${package['usd']})\n"
    
    text += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
    text += "–∑–≤–µ–∑–¥—ã <–Ω–æ–º–µ—Ä_–ø–∞–∫–µ—Ç–∞> <–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞>\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–≤–µ–∑–¥—ã 1 60"
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == 'üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏' and message.from_user.id == ADMIN_ID)
def edit_gift_prices(message):
    prices = load_prices()
    text = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
    for i, (gift_id, gift) in enumerate(prices['gifts'].items(), 1):
        text += f"{i}. {gift['name']} - {gift['price']}‚ÇΩ\n"
    
    text += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
    text += "–ø–æ–¥–∞—Ä–æ–∫ <–Ω–æ–º–µ—Ä> <–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞>\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–∞—Ä–æ–∫ 1 120"
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == 'üëë –¶–µ–Ω—ã –Ω–∞ Premium' and message.from_user.id == ADMIN_ID)
def edit_premium_prices(message):
    prices = load_prices()
    text = "–¢–µ–∫—É—â–∏–µ –ø–∞–∫–µ—Ç—ã Premium:\n\n"
    for i, package in enumerate(prices['premium']['packages'], 1):
        text += f"{i}. {package['name']} - {package['price']}‚ÇΩ\n"
    
    text += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
    text += "–ø—Ä–µ–º–∏—É–º <–Ω–æ–º–µ—Ä_–ø–∞–∫–µ—Ç–∞> <–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞>\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–º–∏—É–º 1 600"
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == "üí´ –¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã")
def edit_star_prices(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    prices = load_prices()
    packages = prices['stars']['packages']
    
    response = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã:\n\n"
    for pkg in packages:
        response += f"{pkg['stars']} –∑–≤–µ–∑–¥ = {pkg['price']}‚ÇΩ (~{pkg['usd']}$)\n"
    
    response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    response += "–∑–≤–µ–∑–¥—ã <–Ω–æ–º–µ—Ä_–ø–∞–∫–µ—Ç–∞> <—Ü–µ–Ω–∞>\n"
    response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–≤–µ–∑–¥—ã 2 60"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text.startswith('–∑–≤–µ–∑–¥—ã '))
def update_star_price(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–∑–≤–µ–∑–¥—ã <–Ω–æ–º–µ—Ä_–ø–∞–∫–µ—Ç–∞> <—Ü–µ–Ω–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–≤–µ–∑–¥—ã 2 60")
            return
            
        try:
            package_num = int(parts[1])
            price = int(parts[2])
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = load_prices()
        packages = prices['stars']['packages']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
        if package_num < 1 or package_num > len(packages):
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {package_num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–î–æ—Å—Ç—É–ø–Ω—ã –ø–∞–∫–µ—Ç—ã —Å 1 –ø–æ {len(packages)}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏ —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –≤ USD
        usd_rate = get_usd_rate()
        usd = round(price / usd_rate, 2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
        package = packages[package_num - 1]
        old_price = package['price']
        old_usd = package['usd']
        package['price'] = price
        package['usd'] = usd
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, github_message = save_prices(prices)
        
        if success:
            response = f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–∞–∫–µ—Ç–∞ #{package_num} ({package['stars']} –∑–≤–µ–∑–¥):\n"
            response += f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}‚ÇΩ (~{old_usd}$)\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ (~{usd}$)\n"
            response += f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {usd_rate}‚ÇΩ –∑–∞ $1\n\n"
            response += github_message
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{github_message}"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üéÅ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏")
def edit_gift_prices(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    prices = load_prices()
    gifts = prices['gifts']
    
    response = "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
    for i, (gift_id, gift) in enumerate(gifts.items(), 1):
        response += f"{i}. {gift['name']} = {gift['price']}‚ÇΩ\n"
    
    response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    response += "–ø–æ–¥–∞—Ä–æ–∫ <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞>\n"
    response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–∞—Ä–æ–∫ 1 200"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text.startswith('–ø–æ–¥–∞—Ä–æ–∫ '))
def update_gift_price(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–ø–æ–¥–∞—Ä–æ–∫ <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–∞—Ä–æ–∫ 1 200")
            return
            
        gift_num = int(parts[1])
        new_price = int(parts[2])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = load_prices()
        gifts = list(prices['gifts'].items())
        
        if gift_num < 1 or gift_num > len(gifts):
            bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(gifts)}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º id –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
        gift_id, gift_data = gifts[gift_num - 1]
        old_price = gift_data['price']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        prices['gifts'][gift_id]['price'] = new_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, github_message = save_prices(prices)
        
        if success:
            response = f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ '{gift_data['name']}' –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
            response += f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}‚ÇΩ\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}‚ÇΩ\n\n"
            response += github_message
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{github_message}"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üëë –¶–µ–Ω—ã –Ω–∞ Premium")
def edit_premium_prices(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    prices = load_prices()
    packages = prices['premium']['packages']
    
    response = "–¢–µ–∫—É—â–∏–µ –ø–∞–∫–µ—Ç—ã Premium:\n\n"
    for i, pkg in enumerate(packages, 1):
        response += f"{i}. {pkg['name']} = {pkg['price']}‚ÇΩ\n"
    
    response += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    response += "–ø—Ä–µ–º–∏—É–º <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞>\n"
    response += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–º–∏—É–º 1 500"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text.startswith('–ø—Ä–µ–º–∏—É–º '))
def update_premium_price(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–ø—Ä–µ–º–∏—É–º <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–º–∏—É–º 1 500")
            return
            
        pkg_num = int(parts[1])
        new_price = int(parts[2])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = load_prices()
        packages = prices['premium']['packages']
        
        if pkg_num < 1 or pkg_num > len(packages):
            bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(packages)}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
        package = packages[pkg_num - 1]
        old_price = package['price']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        package['price'] = new_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, github_message = save_prices(prices)
        
        if success:
            response = f"‚úÖ –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ '{package['name']}' –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
            response += f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}‚ÇΩ\n"
            response += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}‚ÇΩ\n\n"
            response += github_message
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{github_message}"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥' and message.from_user.id == ADMIN_ID)
def back_to_start(message):
    start(message)

def run_flask():
    app.run(host='0.0.0.0', port=5000)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:5000")
    bot.polling()
